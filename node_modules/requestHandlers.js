/** REQUESTHANDLERS.js - functions to handle requests
 *
 * This script stores the functions for handling requests from the server. THese functions
 * are exported as public functions of this module, and are called when the corresponding 
 * route is accessed via the server.
 * Internal functions can also go here, if required to support a public function, but these
 * should be clearly marked as INTERNAL and should not be exported.
 *
 * @author Connor Findlay
 * @version 1.0
 */

//Handle calls to the /incoming-call route. Mainly intended for Working from home
// to call Spotify API and pause playback of music.
function incomingCall(res, req){
	//TODO: Implement Spotify API integration
	console.log("Request handler for 'incoming-call' called");
	res.writeHead(200,{"Content-Type":"text/plain"});
	res.write("Hello World");
	res.end();
}

//Serve static HTML pages when required. We parse the URL from the original request
// and then pass it to serve-static-page once sanitized. The sanitization is to 
// avoid the (hopefully) now un-common directory traversal attack.
// We import 3 node modules for this: url, serve-static-page, and path.
const url = require('url');
const serveStatic = require("serve-static-page");
const path = require('path');
function serve(res,req){
	console.log("Request Handler for 'serve' called.");
	const parsedUrl = url.parse(req.url);

	//Sanitize URL.
	// see https://en.wikipedia.org/wiki/Directory_traversal_attack
	const sanitizePath = path.normalize(parsedUrl.pathname).replace(/^(\.\.[\/\\])+/, '');
	serveStatic.serve(sanitizePath, res);
}

//Display our 404 page.
function deny(res, req){
	//TODO: Make this a pretty HTML thing
	console.log("page not found");
	res.writeHead(404,{"Content-Type":"text/plain"});
	res.write('Requested page not found');
	res.end()
}

//Endpoint for oAuth authentication flow with other services. Logs the standard code and state
// variables to the syslog for the server, which means only someone with access to that log
// (implying SSH access) can get the oAuth tokens.
function oAuthCallback(res, req){
	//TODO: Automate token capture within application
	console.log("oAuth Callback called");
	var myURL = url.parse(req.url);
	var code = myURL.searchParams.get('code');
	var state = myURL.searchParams.get('state');
	
	console.log("Auth code is: " + code);
	console.log("Auth state is: " + state);
}

//Display our icon for the browser. I think these are dumb, and I don't have one. So the function
// is basically a NOP.
function favicon(res){

}

//Retreive user certificate from the request, and compare it to our CA root cert. If invalid,
// kill the connection (nicely).
function certificate(res,req){
	const cert = req.socket.getPeerCertificate();
	
	//console.log(`Authorized: ${req.socket.authorized}, Subject: ${cert.subject}`);
	//console.dir(cert);
	if(req.client.authorized){
		res.statusCode = 200;
		res.write(`Hello ${cert.subject.CN}, your certificate is from ${cert.issuer.CN}!`);
		res.end();
	} else if (cert.subject){
		res.statusCode = 403;
		res.write(`Sorry, ${cert.sunject.CN}, certificates from ${cert.issuer.CN} are not welcome.`);
		res.end();
	} else {
		res.statusCode = 401;
		res.write('Please provide a client certificate');
		res.end();
	}
}

//Export public functions of this module
exports.incomingCall = incomingCall;
exports.deny = deny;
exports.favicon = favicon;
exports.oauth = oAuthCallback;
exports.serve = serve;
exports.cert = certificate;
